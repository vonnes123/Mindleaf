#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/513a9f6e-3480-4859-9f4f-b254d0ad9f44 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool closeMore;
  bool leavesOpen;
  bool openMore;
  bool talking;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>

Adafruit_PWMServoDriver pwm;

int pos0 = 300; // Initial position for servo 0
int pos1 = 300; // Initial position for servo 1
int pos2 = 600; // Initial position for servo 2

//talking function
bool talking_state = false; // Track the talking state
int servo0_direction = 1; // 1 for up, -1 for down
int servo1_direction = -1; // -1 for down, 1 for up
int servo0_position = 300; // Initial position for servo 0
int servo1_position = 300; // Initial position for servo 1
int movement_limit = 40; // Maximum movement in either direction

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  Serial.println("Alternate servo Test");

  pwm.begin();
  pwm.setPWMFreq(50); // Set frequency to 50 Hz

  pwm.setPWM(0, 0, pos0);
  pwm.setPWM(1, 0, pos1);
  pwm.setPWM(2, 0, pos2);


  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 

  //talking function
  if (talking_state) {
    // Move servos, ensuring movement never exceeds the limit
    int move0 = random(-movement_limit, movement_limit + 1); 
    int move1 = random(-movement_limit, movement_limit + 1);

    int next_pos0 = servo0_position + move0;
    int next_pos1 = servo1_position + move1;

    //constrain movements to limit from current position

    next_pos0 = constrain(next_pos0, 100, 500);
    next_pos1 = constrain(next_pos1, 100, 500);

    //Check if the movement exceeds the limit from current position
    if (abs(next_pos0 - servo0_position) > movement_limit) {
      // Adjust the movement to stay within the limit
      if (next_pos0 > servo0_position) {
        next_pos0 = servo0_position + movement_limit;
      } else {
        next_pos0 = servo0_position - movement_limit;
      }
    }

    if (abs(next_pos1 - servo1_position) > movement_limit) {
      // Adjust the movement to stay within the limit
      if (next_pos1 > servo1_position) {
        next_pos1 = servo1_position + movement_limit;
      } else {
        next_pos1 = servo1_position - movement_limit;
      }
    }

    servo0_position = next_pos0;
    servo1_position = next_pos1;


    pwm.setPWM(0, 0, servo0_position);
    pwm.setPWM(1, 0, servo1_position);


    delay(random(200, 500)); // Random delay
  }
}


/*
  Since LeavesOpen is READ_WRITE variable, onLeavesOpenChange() is
  executed every time a new value is received from IoT Cloud.
*/
void smoothTransition(int start0, int end0, int start1, int end1, int start2, int end2, int steps, int delayMs) {
    for (int i = 0; i <= steps; i++) {
        // Calculate intermediate positions
        pos0 = start0 + ((end0 - start0) * i) / steps;
        pos1 = start1 + ((end1 - start1) * i) / steps;
        pos2 = start2 + ((end2 - start2) * i) / steps;

        // Update all servos simultaneously
        pwm.setPWM(0, 0, pos0);
        pwm.setPWM(1, 0, pos1);
        pwm.setPWM(2, 0, pos2);

        delay(delayMs); // Short delay for smooth movement
    }
}

void onLeavesOpenChange() {
    Serial.print("LeavesOpen value: ");
    Serial.println(leavesOpen);

    if (leavesOpen == false) {
        Serial.println("Opening leaves...");
        smoothTransition(pos0, 450, pos1, 150, pos2, 100, 20, 50); // Use current pos as start
    } else {
        Serial.println("Closing leaves...");
        smoothTransition(pos0, 300, pos1, 300, pos2, 600, 20, 50); // Use current pos as start
    }
}

void moveTowardsClose() {
        // Calculate intermediate positions
        if(pos0 > 300){
          pos0 -= 50;
          pos1 += 50;
          pos2 += 166;
        }
        // Update all servos simultaneously
        pwm.setPWM(0, 0, pos0);
        pwm.setPWM(1, 0, pos1);
        pwm.setPWM(2, 0, pos2);

        delay(50); // Short delay for smooth movement
}
/*
  Since CloseMore is READ_WRITE variable, onCloseMoreChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCloseMoreChange()  {
  // Add your code here to act upon CloseMore change
      if (closeMore) { 
        Serial.println("Closing more...");

       moveTowardsClose();  // Increment adjusted for servo 2 moving towards 100
    }
}

void moveTowardsOpen() {
        // Calculate intermediate positions
        if(pos0 < 450){
          pos0 += 50;
          pos1 -= 50;
          pos2 -= 166;
        }
        // Update all servos simultaneously
        pwm.setPWM(0, 0, pos0);
        pwm.setPWM(1, 0, pos1);
        pwm.setPWM(2, 0, pos2);

        delay(50); // Short delay for smooth movement
}
/*
  Since OpenMore is READ_WRITE variable, onOpenMoreChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onOpenMoreChange() {
    if (openMore) { 
        Serial.println("Opening more...");

       moveTowardsOpen();  // Increment adjusted for servo 2 moving towards 100
    }
}

/*
  Since Talking is READ_WRITE variable, onTalkingChange() is
  executed every time a new value is received from IoT Cloud.
*/
//talking function
void onTalkingChange() {
  talking_state = talking; 

  if (talking_state) {
    //Initial movement when talking becomes true
    pos0 += 30;
    pos1 -= 30;
    pwm.setPWM(0, 0, pos0);
    pwm.setPWM(1, 0, pos1);
  } else {
    // Turn off talking state and reset movement parameters if another function is called
    talking_state = false;
    servo0_direction = 1;
    servo1_direction = -1;
  }
}